# -*- coding: utf-8 -*-
"""Tarea5 Vinos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1csQRk4AM8uLyqa2IWJyT7e5gdKk3tFPh
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn as sc
import seaborn 

  
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('IA')

"""

BASE DE DATOS VINO"""

#EXTRAER
wine = pd.read_csv("IA/MyDrive/IA/wine.csv")
print(wine)

print(wine.head())

print(wine.info())

print(wine.describe())

"""MODIFICANDO CALIDAD BUENA=1, MALA=2

"""

wine.loc[wine.quality=='good','quality']=int(1)

wine.loc[wine.quality=='bad','quality']=int(2)

wine['quality']=wine['quality'].astype('int')
print(wine.info())
print(wine)

"""GRAFICANDO PARA ANALIZAR LA INFORMACIÓN"""

#GRAFICAS
wine.hist(bins=25,figsize=(15,10),color=('green'),edgecolor=('black'))

"""ENCONTRANDO LA MATRIZ DE CORRELACIÓN"""

plt.figure(figsize=[18,10],facecolor='green')
seaborn.heatmap(wine.corr(),annot=True)

"""BUSCANDO LA CORRELACIÓN ENTRE CALIDAD Y LAS VARIABLES PODEMOS VER CUALES ESTÁN MÁS RELACIONADAS Y CUALES NO.
ELIMINANDO:


*   PH(0.0033)
*   CITRIC ACID(-0.16)
*   SULPHATES(-0.22)
*   ALCOHOL(-0.43)
*   FIXED ACIDITY(-0.095)
*   FREE SULFUR DIOXIDE(0.062)
*   RESIDUAL SUGAR(0.0022)



"""

#QUITANDO COLUMNAS QUE NO USAMOS
wine= wine.drop(['pH','sulphates','alcohol','fixed acidity','citric acid','free sulfur dioxide','residual sugar'], axis=1)

x = np.array(wine.drop(columns='quality'))
y = np.array(wine['quality'])

"""Regresión logistica"""

def RL(datos):  
  log_model = LogisticRegression()
  log_model.fit(x,y)
  prediction = log_model.predict(datos)[0]
  if prediction==1:
    print(f'\nCalidad del vino: Good')
    print(f'\nPrecisión del modelo DTC :{log_model.score(x, y)*100}\n')
  else:
    print(f'\nCalidad del vino: Bad')
    print(f'\nPrecisión del modelo DTC :{log_model.score(x, y)*100}\n')

"""SVC: Support Vector Classifier"""

def SVCl(datos):
  svc_model = SVC()
  svc_model.fit(x, y)
  prediction = svc_model.predict(datos)[0]
  if prediction==1:
    print(f'\nCalidad del vino: Good')
    print(f'\nPrecisión del modelo DTC :{svc_model.score(x, y)*100}\n')
  else:
    print(f'\nCalidad del vino: Bad')
    print(f'\nPrecisión del modelo DTC :{svc_model.score(x, y)*100}\n')

"""KNC: KNeighborsClassifier"""

def KNC(datos):
  knc_model = KNeighborsClassifier(n_neighbors=5)
  knc_model.fit(x, y)
  prediction = knc_model.predict(datos)[0]
  if prediction==1:
    print(f'\nCalidad del vino: Good')
    print(f'\nPrecisión del modelo DTC :{knc_model.score(x, y)*100}\n')
  else:
    print(f'\nCalidad del vino: Bad')
    print(f'\nPrecisión del modelo DTC :{knc_model.score(x, y)*100}\n')

"""DTC: DecisionTreeClassifier"""

def DTC(datos):
  dtc_model = DecisionTreeClassifier()
  dtc_model.fit(x, y)
  prediction = dtc_model.predict(datos)[0]
  if prediction==1:
    print(f'\nCalidad del vino: Good')
    print(f'\nPrecisión del modelo DTC :{dtc_model.score(x, y)*100}\n')
  else:
    print(f'\nCalidad del vino: Bad')
    print(f'\nPrecisión del modelo DTC :{dtc_model.score(x, y)*100}\n')

"""MENÚ PRINCIPAL"""

print ("MENÚ ")
print ("")
print ("\t1 Regresión Logistica")
print ("\t2 SVCl:Support Vector Classifier")
print ("\t3 KNC:KNeighborsClassifier")
print ("\t4 DTC: DecisionTreeClassifier")


VA= float(input("\tIngrese el valor de volatile acidity:\t"))
VC= float(input("\tIngrese el valor de chlorides:\t"))
SD= float(input("\tIngrese el valor de total sulfur dioxide:\t"))
D= float(input("\tIngrese el valor de density:\t"))
s= int(input("\tSeleccione clasificador deseado\t"))

datos=[VA,VC,SD,D]
datos = np.array(datos).reshape(1,-1) 

if (s == 1):
        print('\t1 Regresión Logistica')
        print ("")
        RL(datos)
elif(s == 2):
        print('\t2 SVC:Support Vector Classifier')
        print ("")
        SVCl(datos)
elif(s == 3):
        print('\t3 KNC:KNeighborsClassifier')
        print ("")
        KNC(datos)
elif(s == 4):
        print('\t4 DTC: DecisionTreeClassifier')
        print ("")
        DTC(datos)
else:
      print('\tSelección no valida')

"""Al comparar los datos con los obtenidos anteriormente se comprueba que la calidad del vino es mala."""