# -*- coding: utf-8 -*-
"""Convoluciones_terminado.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hg3aMc82P_He8fj0KY5vzR5vHDnF5Lbc

Clasificador de imagenes piedra papel o tijera
"""

import os
import zipfile
import tensorflow as tf
import keras_preprocessing
from keras_preprocessing import image
from keras_preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
from google.colab import files
from keras.preprocessing import image
import numpy as np
import matplotlib.image as mpimg

"""DESCARGAR ZIP"""

!wget --no-check-certificate \
    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/rps.zip \
    -O /tmp/rps.zip
  
!wget --no-check-certificate \
    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/rps-test-set.zip \
    -O /tmp/rps-test-set.zip

"""EXTRAER EL ZIP Y GUARDARLO EN DIRECTORIO TEMPORAL"""

import os
import zipfile

local_zip= '/tmp/rps.zip'
zip_ref= zipfile.ZipFile(local_zip,'r')
zip_ref.extractall('/tmp/')
zip_ref.close()

local_zip='/tmp/rps-test-set.zip'
zip_ref=zipfile.ZipFile(local_zip,'r')
zip_ref.extractall('/tmp/')
zip_ref.close()

#DIRECTORIOS TRAIN
rock_dir = os.path.join('/tmp/rps/rock')
paper_dir = os.path.join('/tmp/rps/paper')
scissors_dir = os.path.join('/tmp/rps/scissors')

print('total training rock images:',len(os.listdir(rock_dir)))
print('total training paper images:',len(os.listdir(paper_dir)))
print('total training scissors images:',len(os.listdir(scissors_dir)))

rock_files=  os.listdir(rock_dir)
print(rock_files[:10])

paper_files=  os.listdir(paper_dir)
print(paper_files[:10])

scissors_files=  os.listdir(scissors_dir)
print(rock_files[:10])

#DIRECTORIOS TEST
test_rock_dir = os.path.join('/tmp/rps-test-set/rock')
test_paper_dir = os.path.join('/tmp/rps-test-set/paper')
test_scissors_dir = os.path.join('/tmp/rps-test-set/scissors')

print('total test rock images:',len(os.listdir(test_rock_dir)))
print('total test paper images:',len(os.listdir(test_paper_dir)))
print('total test scissors images:',len(os.listdir(test_scissors_dir)))

test_rock_files=  os.listdir(test_rock_dir)
print(test_rock_files[:10])

test_paper_files=  os.listdir(test_paper_dir)
print(test_paper_files[:10])

test_scissors_files=  os.listdir(test_scissors_dir)
print(test_rock_files[:10])

"""TRAIN GENERATOR"""

TRAINING_DIR ="/tmp/rps/"
VALIDATION_DIR = "/tmp/rps-test-set/"
training_datagen = ImageDataGenerator(rescale= 1./255)
validation_datagen = ImageDataGenerator(rescale = 1./255)


train_generator = training_datagen.flow_from_directory(
    TRAINING_DIR,
    target_size=(150,150),
    class_mode='categorical'
)

"""VALIDATION GENERATOR"""

validation_generator= validation_datagen.flow_from_directory(
    VALIDATION_DIR,
    target_size=(150,150),
    class_mode='categorical'
)

"""DEFINICION DE LA RED NEURONAL"""

model = tf.keras.models.Sequential([
    #CAPAS DE CONCOLUCION                                
    # IMAGENES DE 150*150, 3 CANALES RGB, 64 FILTROS, KERNEL 3X3
    # PRIMER CAPA
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    # SEGUNDA CAPA
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # TERCER CAPA
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # CUARTA CAPA
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # APLANANDO EL RESULTADO
    tf.keras.layers.Flatten(),
    #DROPOUT (DE 0 A 1) SE QUEDA CON LAS CONEXIONES DE LOS PESOS MAYORES Y SIMPLIFICA LA RED
    tf.keras.layers.Dropout(0.5),
    # 512 NEURONAS EN LA CAPA OCULTA
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

"""RECOPILANDO LA RED NEURONAL

NOTA: Lo cambié a 5 epochs en lugar de 25 porque tardaba mucho gg
"""

#MUESTRA LA ARQUITECTURA DE NUESTRO MODELO
model.summary()
#COMPILAMOS
model.compile(loss = 'categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
#.FIT ENTRENA EL MODELO, VEMOS EL CONJUNTO DE ENTRENAMIENTO Y EL DE PRUEBAS,VERBOSE ACOMODA EL CONTENIDO ESTETICAMENTE
history = model.fit_generator(train_generator, epochs=5, validation_data = validation_generator, verbose = 1,validation_steps=3)
#No hay etiquetas porque las etiquetas vienen del generador

"""GRAFICANDO """

import matplotlib.pyplot as plt
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend(loc=0)
plt.figure()


plt.show()

"""PREDICCIÓN DEL MODELO RANDOM"""

#TOMA UNA MUESTRA ALEATORIA DE LA CANTIDAD DE IMAGENES Y PREDICE
#import random
#pos =random.randint(0,372)
print("INDIQUE UN NÚMERO ENTRE EL 0 Y EL 372")
numero = input()
print(f"EL NUMERO QUE SELECCIONÓ FUE:, {numero}")

#CAMBIANDO DE STRING A ENTERO
def string_to_int(numero):
    try:
        temp = int(eval(str(numero)))
        if type(temp) == int:
            return temp
    except:
        return
    
pos = string_to_int(numero)
print(pos)
#PARA SABER EN QUE CARPETA ESTA
folder = round(pos/124,0)
print("SE ENCUENTRA EN EL FOLDER",folder)

predict= model.predict(validation_generator)
print(predict[pos])

#NOS QUEDAMOS SOLO CON EL VALOR MAYOR CON LA FUNCION ARGMAX COMENZANDO EN LA POCISIÓN 0
print(np.argmax(predict[pos]))

if folder == 0:
    img_path = os.path.join(rock_dir,rock_files[pos])
elif folder ==1:
    img_path = os.path.join(paper_dir,paper_files[pos])
else:
    img_path = os.path.join(scissors_dir,scissors_files[pos])
print(img_path)
img= mpimg.imread(img_path)
#plt.imshow(img)
#plt.show
print('LA IMAGEN SELECCIONADA ES LA SIGUIENTE:')

#PREDICIENDO
fn=img_path
#Redimensionando
img = image.load_img(img_path, target_size=(150, 150))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
images = np.vstack([x])
predicc = model.predict(images, batch_size=10)
print(fn)
img = mpimg.imread(fn)
plt.imshow(img)
plt.show()
print('Código: [1.0.0]= PAPEL, [0.1.0]= PIEDRA,[0.0.1]= TIJERA ')
print('')
print('LA PREDICCIÓN ES QUE LA IMAGEN ES:')
print(predicc)