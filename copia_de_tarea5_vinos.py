# -*- coding: utf-8 -*-
"""Copia de Tarea5 Vinos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1peZrkefHYBBlfZbQUasaP36Mslcq44Qc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn as sc

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('IA')

"""

BASE DE DATOS VINO"""

#EXTRAER
wine = pd.read_csv("IA/MyDrive/IA/wine.csv")
print(wine)

#TRANSFERIR 
#QUITANDO COLUMNAS QUE NO USAMOS
#iris= iris.drop('Id',axis=1)
#print(iris)

print(wine.head())

print(wine.info())

print(wine.describe())

x = np.array(iris.drop(columns='Species'))
y = np.array(iris['Species'])

"""Regresión logistica"""

def RL(datos):  
  log_model = LogisticRegression()
  log_model.fit(x,y)
  prediction = log_model.predict(datos)[0]
  print(f'\nCalidad del vino: {prediction}')
  print(f'\nPrecisión del modelo de Regresión Logistica :{log_model.score(x, y)*100}\n')

"""SVC: Support Vector Classifier"""

def SVCl(datos):
  svc_model = SVC()
  svc_model.fit(x, y)
  prediction = svc_model.predict(datos)[0]
  print(f'\nCalidad del vino: {prediction}')
  print(f'\nPrecisión del modelo SVC :{svc_model.score(x, y)*100}\n')

"""KNC: KNeighborsClassifier"""

def KNC(datos):
  knc_model = KNeighborsClassifier(n_neighbors=5)
  knc_model.fit(x, y)
  prediction = knc_model.predict(datos)[0]
  print(f'\nCalidad del vino: {prediction}')
  print(f'\nPrecisión del modelo KNC :{knc_model.score(x, y)*100}\n')

"""DTC: DecisionTreeClassifier"""

def DTC(datos):
  dtc_model = DecisionTreeClassifier()
  dtc_model.fit(x, y)
  prediction = dtc_model.predict(datos)[0]
  print(f'\nCalidad del vino: {prediction}')
  print(f'\nPrecisión del modelo DTC :{dtc_model.score(x, y)*100}\n')

"""MENÚ PRINCIPAL"""

print ("MENÚ ")
print ("")
print ("\t1 Regresión Logistica")
print ("\t2 SVCl:Support Vector Classifier")
print ("\t3 KNC:KNeighborsClassifier")
print ("\t4 DTC: DecisionTreeClassifier")


AP= float(input("\tIngrese el ancho pétalo:\t"))
LP= float(input("\tIngrese al largo pétalo:\t"))
AS= float(input("\tIngrese el ancho sépalo:\t"))
LS= float(input("\tIngrese al largo sépalo:\t"))
s= int(input("\tSeleccione clasificador deseado\t"))

datos=[LS,AS,LP,AP]
datos = np.array(datos).reshape(1,-1) 

if (s == 1):
        print('\t1 Regresión Logistica')
        print ("")
        RL(datos)
elif(s == 2):
        print('\t2 SVC:Support Vector Classifier')
        print ("")
        SVCl(datos)
elif(s == 3):
        print('\t3 KNC:KNeighborsClassifier')
        print ("")
        KNC(datos)
elif(s == 4):
        print('\t4 DTC: DecisionTreeClassifier')
        print ("")
        DTC(datos)
else:
      print('\tSelección no valida')

"""COMPARANDO CON LA BASE DE DATOS DEL INICIO SE COMPRUEBA QUE AL COLOCAR LAS MISMAS MEDIDAS, LA ESPECIE IDENTIFICADA COINCIDE

"""