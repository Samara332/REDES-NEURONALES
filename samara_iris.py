# -*- coding: utf-8 -*-
"""Samara Iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R8Tv60hAhXs37oOHwWpQoYwuRN4UVGsF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn as sc

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('IA')

iris = pd.read_csv("IA/MyDrive/IA/Iris.csv")
print(iris)

#Borrar filas que no funcionan
#iris= iris.drop('Id',axis=1)
print(iris)

print(iris.head())

print(iris.info())

print(iris.describe())

print(iris['Species'].value_counts())

fig = iris[iris.Species == 'Iris-setosa'].plot()
iris[iris.Species == 'Iris-versicolor'].plot()
iris[iris.Species == 'Iris-virginica'].plot()

plt.show()

fig = iris[iris.Species == 'Iris-setosa'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm', color='red', label='setosa')
iris[iris.Species == 'Iris-versicolor'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm', color='green', label='versicolor',ax=fig)
iris[iris.Species == 'Iris-virginica'].plot(kind='scatter',x='SepalLengthCm', y='SepalWidthCm', color='blue', label='virginica',ax=fig)

plt.show()

fig = iris[iris.Species == 'Iris-setosa'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm', color='red', label='setosa')
iris[iris.Species == 'Iris-versicolor'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm', color='green', label='versicolor',ax=fig)
iris[iris.Species == 'Iris-virginica'].plot(kind='scatter',x='PetalLengthCm', y='PetalWidthCm', color='blue', label='virginica',ax=fig)

plt.show()

fig = iris[iris.Species == 'Iris-setosa'].plot(kind='scatter', x='PetalLengthCm', y='SepalLengthCm', color='red', label='setosa')
iris[iris.Species == 'Iris-versicolor'].plot(kind='scatter', x='PetalLengthCm', y='SepalLengthCm', color='green', label='versicolor',ax=fig)
iris[iris.Species == 'Iris-virginica'].plot(kind='scatter',x='PetalLengthCm', y='SepalLengthCm', color='blue', label='virginica',ax=fig)

plt.show()

fig = iris[iris.Species == 'Iris-setosa'].plot(kind='scatter', x='SepalWidthCm', y='PetalWidthCm', color='red', label='setosa')
iris[iris.Species == 'Iris-versicolor'].plot(kind='scatter', x='SepalWidthCm', y='PetalWidthCm', color='green', label='versicolor',ax=fig)
iris[iris.Species == 'Iris-virginica'].plot(kind='scatter',x='SepalWidthCm', y='PetalWidthCm', color='blue', label='virginica',ax=fig)

plt.show()

x = np.array(iris.drop(columns='Species'))
y = np.array(iris['Species'])

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2)

"""Regresión logistica"""

log_model = LogisticRegression()
log_model.fit(x_train,y_train)
prediction = log_model.predict(x_test)
print(f'Precisión del modelo de Regresión Logistica es:{log_model.score(x_train, y_train)*100}')
print(prediction)

for i in range (len(y_test)):
  if y_test[i]== prediction[i]:
    print("CORRECTO")
  else:
    print("INCORRECTO")
    print(f'{y_test[i]} => {prediction[i]}')

"""SVC"""

svc_model = SVC()
svc_model.fit(x_train, y_train)
prediction = svc_model.predict(x_test)
print(f'Precisión del modelo SVC es:{log_model.score(x_train, y_train)*100}')
print(prediction)

"""KNC"""

knc_model = KNeighborsClassifier(n_neighbors=5)
knc_model.fit(x_train, y_train)
prediction = svc_model.predict(x_test)
print(f'Precisión del modelo KNC es:{knc_model.score(x_train, y_train)*100}')
print(prediction)

"""DTC"""

dtc_model = DecisionTreeClassifier()
dtc_model.fit(x_train, y_train)
prediction = dtc_model.predict(x_test)
print(f'Precisión del modelo DTC es:{dtc_model.score(x_train, y_train)*100}')
print(prediction)